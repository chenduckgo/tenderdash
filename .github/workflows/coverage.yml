---
name: Test Coverage
on:
  pull_request:
  push:
    paths:
      - "**.go"
    branches:
      - master
      - release/**
      - v0.*-dev

jobs:
  bls-signatures:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.17"
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Get BLS library revision
        id: bls-revision
        run: |
          echo "::set-output name=hash::$(git --git-dir=third_party/bls-signatures/src/.git rev-parse HEAD)"
        shell: bash
      - uses: actions/cache@v2
        id: bls-cache
        with:
          path: ~/bls-cache
          key: ${{ runner.os }}-bls-${{ steps.bls-revision.outputs.hash }}
      - name: Build BLS library
        run: make install-bls
        if: steps.bls-cache.outputs.cache-hit != 'true'
      - name: Save BLS library
        run: |
          mkdir -p ~/bls-cache/include
          cp -vr /usr/local/include/chiabls ~/bls-cache/include
          cp -vr /usr/local/include/relic* ~/bls-cache/include
          cp -v /usr/local/lib/libchiabls.a ~/bls-cache/
        if: steps.bls-cache.outputs.cache-hit != 'true'
      - uses: actions/cache@v2.1.2
        with:
          path: ~/bls-cache
          key: ${{ runner.os }}-bls-${{ steps.bls-revision.outputs.hash }}
        if: steps.bls-cache.outputs.cache-hit != 'true'

  build-linux:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goarch: ["arm", "amd64"]
    timeout-minutes: 5
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: "1.17"
      - uses: actions/checkout@v2.3.4
      - uses: technote-space/get-diff-action@v5
        with:
          PATTERNS: |
            **/**.go
            "!test/"
            go.mod
            go.sum
            Makefile
      - name: post-setup go 1.17
        run: |
          sudo mv /bin/go /bin/go-old
          sudo ln -s "$GOROOT/bin/go" /bin/go
      - name: install
        run: sudo make install
        if: env.GIT_DIFF != ''
      - name: build
        run: GOOS=linux GOARCH=${{ matrix.goarch }} make build
        if: matrix.goarch == 'amd64' && env.GIT_DIFF != ''
      - name: build
        run: |
          sudo apt-get update
          sudo apt-get install gcc-arm-linux-gnueabihf g++-8-arm-linux-gnueabihf
          export CC=arm-linux-gnueabihf-gcc
          export CXX=arm-linux-gnueabihf-g++-8
          GOOS=linux GOARCH=${{ matrix.goarch }} sudo make build
        if: matrix.goarch == 'arm' && env.GIT_DIFF != ''

  tests:
    runs-on: ubuntu-latest
    needs: [bls-signatures]
    strategy:
      fail-fast: false
      matrix:
        part: ["00", "01", "02", "03"]
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: "1.17"
      - uses: actions/checkout@v2.3.4
      - uses: technote-space/get-diff-action@v5
        with:
          PATTERNS: |
            **/**.go
            "!test/"
            go.mod
            go.sum
            Makefile
      - uses: actions/cache@v2
        with:
          path: ~/bls-cache
          key: ${{ runner.os }}-bls-${{ steps.bls-revision.outputs.hash }}
      - name: Install BLS library
        run: |
          sudo cp -vr ~/bls-cache/include/* /usr/local/include/
          sudo cp -vr ~/bls-cache/libchiabls.a /usr/local/lib/
      - name: test & coverage report creation
        run: |
          make test-group-${{ matrix.part }} NUM_SPLIT=4
        if: env.GIT_DIFF
      - uses: actions/upload-artifact@v2
        with:
          name: "${{ github.sha }}-${{ matrix.part }}-coverage"
          path: ./build/${{ matrix.part }}.profile.out

  upload-coverage-report:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: true
      - name: Get BLS library revision
        id: bls-revision
        run: |
          echo "::set-output name=hash::$(git --git-dir=third_party/bls-signatures/src/.git rev-parse HEAD)"
        shell: bash
      - uses: technote-space/get-diff-action@v5.0.2
        with:
          PATTERNS: |
            **/**.go
            "!test/"
            go.mod
            go.sum
            Makefile
      - uses: actions/download-artifact@v2
        with:
          name: "${{ github.sha }}-00-coverage"
        if: env.GIT_DIFF
      - uses: actions/download-artifact@v2
        with:
          name: "${{ github.sha }}-01-coverage"
        if: env.GIT_DIFF
      - uses: actions/download-artifact@v2
        with:
          name: "${{ github.sha }}-02-coverage"
        if: env.GIT_DIFF
      - uses: actions/download-artifact@v2
        with:
          name: "${{ github.sha }}-03-coverage"
        if: env.GIT_DIFF
      - run: |
          cat ./*profile.out | grep -v "mode: set" >> coverage.txt
        if: env.GIT_DIFF
      - uses: codecov/codecov-action@v2.1.0
        with:
          file: ./coverage.txt
        if: env.GIT_DIFF
